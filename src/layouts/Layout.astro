---
interface Props {
	title: string;
	description: string;
	image: string;
	section_class?: string;
	data_state?: string;
}

const slideRight = {
  old: {
    name: 'slideOutToLeft',
    duration: '0.65s',
    easing: 'ease',
    fillMode: 'backwards',
  },
  new: {
    name: 'slideInFromRight',
    duration: '0.65s',
    easing: 'ease',
    fillMode: 'forwards',
  }
};

const slideLeft = {
  old: {
    name: 'slideOutToRight',
    duration: '0.65s',
    easing: 'ease',
    fillMode: 'backwards',
  },
  new: {
    name: 'slideInFromLeft',
    duration: '0.65s',
    easing: 'ease',
    fillMode: 'forwards',
  }
};

const fading = {
  old: {
    name: 'fadeOut',
    duration: '0.4s',
    easing: 'ease',
  },
  new: {
    name: 'fadeIn',
    duration: '0.4s',
    easing: 'ease',
  }
};

const animation = {
  forward: slideRight,
  backward: slideLeft,
  fade: fading 
};

import { ViewTransitions } from 'astro:transitions';
import BrakePad from 'astro-vtbot/components/BrakePad.astro'
import { adapter } from 'astro-vtbot/animations/animation-style';
import { AstroFont } from "astro-font";
import '@src/config.css';
import SpeedInsights from '@vercel/speed-insights/astro';
import Footer from '@components/Footer.astro';
import Nav from '@components/Nav.astro';
import PageOffset from 'astro-vtbot/components/PageOffset.astro';
import { join } from 'node:path';

const { title, description, image, section_class, data_state } = Astro.props;
const cover = `${Astro.site}covers/${image}`;
const url = 'ncp.dev';
const handle = '@KingPr0o7';
---

<!doctype html>
<html lang="en">
	<head>
		<!-- Incipients -->
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="robots" content="index,follow">

		<!-- Favicons -->
		<link rel="apple-touch-icon" sizes="180x180" href="/favicons/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicons/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicons/favicon-16x16.png">
		<link rel="shortcut icon" href="/favicons/favicon.ico">

		<!-- Twitter -->
		<meta name="twitter:card" content="summary_large_image">
		<meta name="twitter:image" content={cover}/>
		<meta property="twitter:title" content={title}>
		<meta property="twitter:description" content={description}>
		<meta name="twitter:creator" content={handle}>
		<meta name="twitter:site" content={handle}>
		<meta name="twitter:dnt" content="on">

		<!-- Open Graph -->
		<meta property="og:title" content={title}>
		<meta property="og:description" content={description}>
		<meta property="og:image" content={cover}>
		<meta property="og:locale" content="en_GB">
		<meta property="og:type" content="website">
		<meta property="og:url" content={url}>
		<meta property="og:site_name" content="Nathan Parker">

		<!-- Other -->
		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
		<meta name="theme-color" content="#10100f">
		<link rel="mask-icon" href="/favicons/safari-pinned-tab.svg" color="#084c9a">

		<!-- Font -->
		<AstroFont
			config={[
				{
					name: "rubik",
					src: [
						{
							style: 'normal',
							weight: '400',
							path: join(process.cwd(), 'public', 'fonts', 'rubik.ttf')
						},
						{
							style: 'medium',
							weight: '600',
							path: join(process.cwd(), 'public', 'fonts', 'rubik-600.ttf')
						},
					],
						preload: true,
						display: "swap",
						selector: "*",
						fallback: "sans-serif",
				},
			]}
		/>

		<!-- Astro -->
		<meta name="generator" content={Astro.generator} />
		<ViewTransitions fallback="swap" />
		<!-- <BrakePad duration={10000}/> -->
		<PageOffset name="main" />

		<script is:inline>
			function speedInsightsBeforeSend(data) {
			  console.log("Speed Insights before send", data)
			  return data;
			}
		</script>
	  
		<SpeedInsights />
	</head>
	<body>
		<Nav />
		<main transition:animate={adapter(animation)} data-state={data_state} transition:name="main">
			<section class={section_class}>
				<slot />
			</section>
		</main>
		<Footer />
	</body>
</html>

<script define:vars={{slideRight, slideLeft}}> 
	const pageOrder = ['/', '/about', '/projects', '/blogs', '/contact'];

	document.addEventListener('astro:before-preparation', (e) => {
		let currentPageIndex = pageOrder.indexOf(e.to.pathname);
		let previousPageIndex = pageOrder.indexOf(e.from.pathname);

		currentPageIndex < previousPageIndex ? e.direction = 'backward' : e.direction = 'forward';
		sessionStorage.setItem('direction', e.direction);
		currentPageIndex === -1 || previousPageIndex === -1 ? e.direction = 'fade' : 'forward';
	});
</script>

<script>
	//
	// Script written and provided by Martin
	//   Gathers elements and applies view transition names, based
	//   on the current and previous page paths. As inline-defined 
	//   transition names aren't overriden and disobey parent
	//   transition names.
	//

	const BANNER_IMAGE = ".blog-image-wrapper .blog-image";
	const BANNER_TITLE = ".blog-image-wrapper .blog-title";
	const POST_IMAGE = '.blog-link[href="${pathname}"] .blog-thumbnail';
	const POST_TITLE = '.blog-link[href="${pathname}"] .blog-embed-title';

	// Apply view transition names based on the current and previous page paths
	document.addEventListener("astro:before-preparation", (e) => {
		const originalLoader = e.loader;
		e.loader = async () => {
			await originalLoader();
			if (fromTo(e.from, "/blogs", e.to, "/blog/")) {
				addBlogBannerViewTransitionNames(e.newDocument);
				addBlogPostViewTransitionNames(document, e.to.pathname);
			}

			if (fromTo(e.from, "/blog/", e.to, "/blogs")) {
				addBlogBannerViewTransitionNames(document);
				addBlogPostViewTransitionNames(e.newDocument, e.from.pathname);
			}
		};
	});
	
	function fromTo(from: URL, fromValue: string, to: URL, toValue: string) {
		return (
			from.pathname.startsWith(fromValue) && to.pathname.startsWith(toValue)
		);
	}

	// Remove the transition if pathname isn't a blog/blogs pages
	document.addEventListener("astro:before-swap", (e) =>
		e.viewTransition.ready.finally(() =>
			removeBlogViewTransitionNames(document, e.from.pathname)
		)
	);

	function addBlogBannerViewTransitionNames(doc: Document) {
		setName(doc, BANNER_IMAGE, "blog-image");
		setName(doc, BANNER_TITLE, "blog-title");
	}

	function addBlogPostViewTransitionNames(doc: Document, pathname: string) {
		setName(doc, withPathname(pathname, POST_IMAGE), "blog-image");
		setName(doc, withPathname(pathname, POST_TITLE), "blog-title");
	}

	function removeBlogViewTransitionNames(doc: Document, pathname: string) {
		setName(doc, BANNER_IMAGE, "");
		setName(doc, BANNER_TITLE, "");
		setName(doc, withPathname(pathname, POST_IMAGE), "");
		setName(doc, withPathname(pathname, POST_TITLE), "");
	}

	function withPathname(pathname: string, selector: string) {
		return selector.replace("${pathname}", pathname);
	}

	// Apply said view transition names
	function setName(doc: Document, selector: string, name: string) {
		const element = doc.querySelector<HTMLElement>(selector);
		if (element) {
			// @ts-ignore
			element.style.viewTransitionName = name;
		} else {
			name && console.warn(`Element not found: ${selector}`);
		}
	}
</script>

<style is:inline>
/* Sorry Martin! */
#vtbot-loading-indicator {
	display: none;
}

main {
	display: grid;
	grid-template-columns: /* Credit to: Kevin Powell (Credits Page) */
		[full-start] minmax(25px, 1fr) [content-start] minmax(0, var(--max-width)) [content-end] minmax(25px, 1fr) [full-end];
	padding-top: 70px;
	min-height: 100vh;
	width: 100%;
	place-content: center;
}

	main > * { grid-column: content; }

	main[data-state="padded"] { padding-top: 95px; }

	section { max-width: var(--max-width); }

		.flexed, .unrestricted {
			min-height: 100vh;
			height: fit-content;
			display: flex;
			flex-direction: column;
			align-items: center;
			gap: 25px;
			justify-content: space-around;
		}

		.about-section, .unrestricted { justify-content: flex-start; }

		.about-section {
			display: flex;
			flex-direction: column;
			align-items: center;
			width: 100%;
			gap: 50px;
		}

@media (max-width: 1000px) {
	main, main[data-state="padded"] { padding-top: 0px; } /* Removes top padding due to navbar moving to bottom of vh */
	.blogs-section, .blog-viewer { padding: 0; grid-column: full !important;}
	.about-section { grid-column: full !important; }
		.about-section > *:not(#prologue) { padding: 0 25px }

}

@media (min-height: 2000px) {
	main { place-content: start; }
}

@keyframes slideInFromRight {
    0% {
        transform: translateX(100%);
        opacity: 0;
    }
    100% {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes slideOutToLeft {
    0% {
        transform: translateX(0);
        opacity: 1;
    }
    100% {
        transform: translateX(-100%);
        opacity: 0;
    }
}

@keyframes slideInFromLeft {
    0% {
        transform: translateX(-100%);
        opacity: 0;
    }
    100% {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes slideOutToRight {
    0% {
        transform: translateX(0);
        opacity: 1;
    }
    100% {
        transform: translateX(100%);
        opacity: 0;
    }
}

@keyframes fadeIn {
	0% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}

@keyframes fadeOut {
	0% {
		opacity: 1;
	}
	100% {
		opacity: 0;
	}
}
</style>